[
  {
    "id": "370e9e1.11b4462",
    "type": "tab",
    "label": "Weather Station",
    "disabled": false,
    "info": ""
  },
  {
    "id": "1bd9bc23.a9eab4",
    "type": "group",
    "z": "370e9e1.11b4462",
    "name": "Pull Full Weather Data for MQTT Publish",
    "style": {
      "stroke": "#0070c0",
      "label": true,
      "label-position": "n",
      "color": "#3f3f3f"
    },
    "nodes": [
      "3a3c4999.b29156",
      "a56cb8e.7eb9348",
      "2296b91a.0a6a66",
      "4d075e2c.a70a2",
      "cf5fe08.79a112",
      "83332eec.dba97",
      "85f09747.cbbae8",
      "99c1650f.dadde8",
      "ef2a1cda.e0547",
      "12a998f6.e862d7",
      "c057b3a4.fa39b",
      "422acfaf.56eb4",
      "7380c3a5.67200c",
      "39021eb8.7adb32"
    ],
    "x": 14,
    "y": 279,
    "w": 852,
    "h": 382
  },
  {
    "id": "9b54b59f.03ba18",
    "type": "group",
    "z": "370e9e1.11b4462",
    "style": {
      "stroke": "#999999",
      "stroke-opacity": "1",
      "fill": "none",
      "fill-opacity": "1",
      "label": true,
      "label-position": "nw",
      "color": "#a4a4a4"
    },
    "nodes": [
      "2b1d7626.dc109a",
      "cd8d58d0.0a6618",
      "aa17fc99.652a1",
      "c11dcd8.0a84e3",
      "3e2cb131.17583e",
      "18715655.7fd3ea",
      "8e3a2d51.4178",
      "d54fce86.34ad3"
    ],
    "x": 14,
    "y": 699,
    "w": 732,
    "h": 242
  },
  {
    "id": "e9b4a844.821958",
    "type": "group",
    "z": "370e9e1.11b4462",
    "name": "Publish UDP Weather Data to MQTT",
    "style": {
      "label": true,
      "stroke": "#ffC000",
      "label-position": "n",
      "color": "#3f3f3f"
    },
    "nodes": [
      "f29a669e.1b5348",
      "9a9df2d7.536cd",
      "fc92311.51807d",
      "75bb6fa4.fd3f5",
      "4da15943.367078",
      "5c5726d3.284e28",
      "f8a59b4a.6618f8",
      "e5ae377c.8bd418",
      "7f84f019.d7af2",
      "20c24ac6.b067d6",
      "31e96dc8.823452"
    ],
    "x": 14,
    "y": 19,
    "w": 852,
    "h": 242
  },
  {
    "id": "f29a669e.1b5348",
    "type": "udp in",
    "z": "370e9e1.11b4462",
    "g": "e9b4a844.821958",
    "name": "Weather Data Stream",
    "iface": "",
    "port": "22222",
    "ipv": "udp4",
    "multicast": "false",
    "group": "",
    "datatype": "utf8",
    "x": 140,
    "y": 140,
    "wires": [["9a9df2d7.536cd"]]
  },
  {
    "id": "9a9df2d7.536cd",
    "type": "json",
    "z": "370e9e1.11b4462",
    "g": "e9b4a844.821958",
    "name": "Parse JSON string",
    "property": "payload",
    "action": "obj",
    "pretty": false,
    "x": 370,
    "y": 140,
    "wires": [["fc92311.51807d"]]
  },
  {
    "id": "fc92311.51807d",
    "type": "function",
    "z": "370e9e1.11b4462",
    "g": "e9b4a844.821958",
    "name": "Translate Object",
    "func": "const prefix = \"daviswx\";\nconst did = msg.payload.did;\nconst ts = msg.payload.ts;\nconst conditions = msg.payload.conditions;\n\nvar output = [\n    {\n        topic: prefix + \"/\" + did.toString() + \"/ts\",\n        key: \"ts\",\n        payload: ts\n    }\n];\n\n// Iterate through each condition report\nconditions.forEach(function (c) {\n    const topic = prefix + \"/\" + did.toString() + \"/\" + c.txid.toString() + \"/\";\n    // Iterate values inside condition\n    for (const [key, value] of Object.entries(c)) {\n        if (key != \"data_structure_type\") {\n            output.push({\n                topic: topic + key,\n                key,\n                payload: value\n            });\n        }\n    }\n});\n\nreturn [ output ];",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "x": 360,
    "y": 183,
    "wires": [["4da15943.367078"]]
  },
  {
    "id": "75bb6fa4.fd3f5",
    "type": "debug",
    "z": "370e9e1.11b4462",
    "g": "e9b4a844.821958",
    "name": "",
    "active": false,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "true",
    "targetType": "full",
    "statusVal": "",
    "statusType": "auto",
    "x": 770,
    "y": 60,
    "wires": []
  },
  {
    "id": "4da15943.367078",
    "type": "rbe",
    "z": "370e9e1.11b4462",
    "g": "e9b4a844.821958",
    "name": "Dupe Filter",
    "func": "rbe",
    "gap": "",
    "start": "",
    "inout": "out",
    "property": "payload",
    "x": 350,
    "y": 220,
    "wires": [["20c24ac6.b067d6"]]
  },
  {
    "id": "3a3c4999.b29156",
    "type": "http request",
    "z": "370e9e1.11b4462",
    "g": "1bd9bc23.a9eab4",
    "name": "Req Conditions",
    "method": "GET",
    "ret": "obj",
    "paytoqs": false,
    "url": "http://10.10.20.45/v1/current_conditions",
    "tls": "",
    "persist": false,
    "proxy": "",
    "authType": "",
    "x": 140,
    "y": 400,
    "wires": [
      ["2296b91a.0a6a66", "4d075e2c.a70a2", "99c1650f.dadde8", "ef2a1cda.e0547"]
    ]
  },
  {
    "id": "a56cb8e.7eb9348",
    "type": "inject",
    "z": "370e9e1.11b4462",
    "g": "1bd9bc23.a9eab4",
    "name": "Every minute",
    "props": [
      {
        "p": "payload"
      },
      {
        "p": "topic",
        "vt": "str"
      }
    ],
    "repeat": "61",
    "crontab": "",
    "once": true,
    "onceDelay": "2",
    "topic": "",
    "payload": "",
    "payloadType": "date",
    "x": 140,
    "y": 320,
    "wires": [["3a3c4999.b29156"]]
  },
  {
    "id": "2296b91a.0a6a66",
    "type": "function",
    "z": "370e9e1.11b4462",
    "g": "1bd9bc23.a9eab4",
    "name": "Translate Object",
    "func": "if (!msg.payload.data) return\n\nconst prefix = \"daviswx\"\nconst did = msg.payload.data.did\nconst ts = msg.payload.data.ts\nconst conditions = msg.payload.data.conditions\n\nvar output = [\n    {\n        topic: prefix + \"/\" + did.toString() + \"/did\",\n        key: \"did\",\n        payload: did\n    },\n    {\n        topic: prefix + \"/\" + did.toString() + \"/ts\",\n        key: \"ts\",\n        payload: ts\n    }\n]\n\n// Iterate through each condition report\nconditions.forEach(function (c) {\n    var topic = prefix + \"/\" + did.toString() + \"/\"\n    if (c.txid) topic += c.txid.toString() + \"/\"\n    // Iterate values inside condition\n    for (const [key, value] of Object.entries(c)) {\n        if (key != \"data_structure_type\") {\n            output.push({\n                topic: topic + key,\n                key,\n                payload: value\n            })\n        }\n    }\n})\n\nreturn [ output ];",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "x": 380,
    "y": 480,
    "wires": [["85f09747.cbbae8", "422acfaf.56eb4", "39021eb8.7adb32"]]
  },
  {
    "id": "5c5726d3.284e28",
    "type": "mqtt out",
    "z": "370e9e1.11b4462",
    "g": "e9b4a844.821958",
    "name": "Publish",
    "topic": "",
    "qos": "0",
    "retain": "true",
    "broker": "87a27594.e70098",
    "x": 780,
    "y": 120,
    "wires": []
  },
  {
    "id": "2b1d7626.dc109a",
    "type": "inject",
    "z": "370e9e1.11b4462",
    "g": "9b54b59f.03ba18",
    "name": "Every 15 minutes",
    "repeat": "960",
    "crontab": "",
    "once": true,
    "onceDelay": "1",
    "topic": "",
    "payload": "",
    "payloadType": "date",
    "x": 150,
    "y": 740,
    "wires": [["cd8d58d0.0a6618"]]
  },
  {
    "id": "cd8d58d0.0a6618",
    "type": "http request",
    "z": "370e9e1.11b4462",
    "g": "9b54b59f.03ba18",
    "name": "Req Current Forecast",
    "method": "GET",
    "ret": "obj",
    "paytoqs": false,
    "url": "https://api.darksky.net/forecast/30d21a2ff7fe9a90e969847007766027/27.9378,-82.4521?exclude=minutely,hourly,flags",
    "tls": "",
    "proxy": "",
    "authType": "",
    "x": 400,
    "y": 740,
    "wires": [["aa17fc99.652a1"]]
  },
  {
    "id": "aa17fc99.652a1",
    "type": "switch",
    "z": "370e9e1.11b4462",
    "g": "9b54b59f.03ba18",
    "name": "Check payload is JSON",
    "property": "payload",
    "propertyType": "msg",
    "rules": [
      {
        "t": "istype",
        "v": "object",
        "vt": "object"
      }
    ],
    "checkall": "true",
    "repair": false,
    "outputs": 1,
    "x": 410,
    "y": 800,
    "wires": [["c11dcd8.0a84e3", "18715655.7fd3ea", "8e3a2d51.4178"]]
  },
  {
    "id": "c11dcd8.0a84e3",
    "type": "debug",
    "z": "370e9e1.11b4462",
    "g": "9b54b59f.03ba18",
    "name": "",
    "active": false,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "true",
    "targetType": "full",
    "x": 650,
    "y": 800,
    "wires": []
  },
  {
    "id": "3e2cb131.17583e",
    "type": "mqtt out",
    "z": "370e9e1.11b4462",
    "g": "9b54b59f.03ba18",
    "name": "Publish darksky",
    "topic": "",
    "qos": "0",
    "retain": "true",
    "broker": "87a27594.e70098",
    "x": 640,
    "y": 860,
    "wires": []
  },
  {
    "id": "18715655.7fd3ea",
    "type": "change",
    "z": "370e9e1.11b4462",
    "g": "9b54b59f.03ba18",
    "name": "Currently",
    "rules": [
      {
        "t": "set",
        "p": "topic",
        "pt": "msg",
        "to": "darksky/currently",
        "tot": "str"
      },
      {
        "t": "move",
        "p": "payload.currently",
        "pt": "msg",
        "to": "payload",
        "tot": "msg"
      }
    ],
    "action": "",
    "property": "",
    "from": "",
    "to": "",
    "reg": false,
    "x": 360,
    "y": 860,
    "wires": [["3e2cb131.17583e"]]
  },
  {
    "id": "8e3a2d51.4178",
    "type": "change",
    "z": "370e9e1.11b4462",
    "g": "9b54b59f.03ba18",
    "name": "Today",
    "rules": [
      {
        "t": "set",
        "p": "topic",
        "pt": "msg",
        "to": "darksky/today",
        "tot": "str"
      },
      {
        "t": "move",
        "p": "payload.daily.data[0]",
        "pt": "msg",
        "to": "payload",
        "tot": "msg"
      }
    ],
    "action": "",
    "property": "",
    "from": "",
    "to": "",
    "reg": false,
    "x": 350,
    "y": 900,
    "wires": [["d54fce86.34ad3"]]
  },
  {
    "id": "d54fce86.34ad3",
    "type": "rbe",
    "z": "370e9e1.11b4462",
    "g": "9b54b59f.03ba18",
    "name": "",
    "func": "rbei",
    "gap": "",
    "start": "",
    "inout": "out",
    "property": "payload",
    "x": 470,
    "y": 900,
    "wires": [["3e2cb131.17583e"]]
  },
  {
    "id": "4d075e2c.a70a2",
    "type": "function",
    "z": "370e9e1.11b4462",
    "g": "1bd9bc23.a9eab4",
    "name": "Autodiscovery",
    "func": "const expire = 300;\nconst deviceid = msg.payload.data.did;\nconst txid = \"1\";\nconst prefix = \"daviswx/\" + deviceid;\nconst txprefix = prefix + \"/\" + txid;\nconst device =  {\n    \"ids\": [ deviceid ],\n    \"manufacturer\": \"Davis Instruments\",\n    \"name\": \"Vantage\",\n    \"model\": \"Vue\"\n};\nconst rain_size = msg.payload.data.conditions[0].rain_size;\nconst rain_convert = rain_size  == 1 ? 0.01\n                 : rain_size  == 2 ? 0.2\n                 : rain_size  == 3 ? 0.1 \n                 : rain_size  == 4 ? 0.001 \n                 : 0;\n\nreturn [[\n    {\n        topic: \"homeassistant/sensor/\" + deviceid + \"_temp/config\",\n        payload: {\n            \"device\": device,\n            \"device_class\": \"temperature\",\n            \"name\": \"Current Temperature\",\n            \"unique_id\": deviceid + \"_temp\",\n            \"state_topic\": txprefix + \"/temp\",\n            \"unit_of_measurement\": \"°F\",\n            \"expire_after\": expire,\n            \"icon\": \"mdi:thermometer\"\n        }\n    },\n    {\n        topic: \"homeassistant/sensor/\" + deviceid + \"_hum/config\",\n        payload: {\n            \"device\": device,\n            \"device_class\": \"humidity\",\n            \"name\": \"Current Humidity\",\n            \"unique_id\": deviceid + \"_hum\",\n            \"state_topic\": txprefix + \"/hum\",\n            \"unit_of_measurement\": \"%\",\n            \"expire_after\": expire,\n            \"icon\": \"mdi:water-percent\"\n        }\n    },\n    {\n        topic: \"homeassistant/sensor/\" + deviceid + \"_dew_point/config\",\n        payload: {\n            \"device\": device,\n            \"device_class\": \"temperature\",\n            \"name\": \"Current Dew Point\",\n            \"unique_id\": deviceid + \"_dew_point\",\n            \"state_topic\": txprefix + \"/dew_point\",\n            \"unit_of_measurement\": \"F\",\n            \"expire_after\": expire,\n            \"icon\": \"mdi:water\"\n        }\n    },\n    {\n        topic: \"homeassistant/sensor/\" + deviceid + \"_wet_bulb/config\",\n        payload: {\n            \"device\": device,\n            \"device_class\": \"temperature\",\n            \"name\": \"Current Web Bulb\",\n            \"unique_id\": deviceid + \"_wet_bulb\",\n            \"state_topic\": txprefix + \"/wet_bulb\",\n            \"unit_of_measurement\": \"F\",\n            \"expire_after\": expire,\n            \"icon\": \"mdi:water\"\n        }\n    },\n    {\n        topic: \"homeassistant/sensor/\" + deviceid + \"_heat_index/config\",\n        payload: {\n            \"device\": device,\n            \"device_class\": \"temperature\",\n            \"name\": \"Current Heat Index\",\n            \"unique_id\": deviceid + \"_heat_index\",\n            \"state_topic\": txprefix + \"/heat_index\",\n            \"unit_of_measurement\": \"F\",\n            \"expire_after\": expire\n        }\n    },\n    {\n        topic: \"homeassistant/sensor/\" + deviceid + \"_wind_chill/config\",\n        payload: {\n            \"device\": device,\n            \"device_class\": \"temperature\",\n            \"name\": \"Current Wind Chill\",\n            \"unique_id\": deviceid + \"_wind_chill\",\n            \"state_topic\": txprefix + \"/wind_chill\",\n            \"unit_of_measurement\": \"F\",\n            \"expire_after\": expire\n        }\n    },\n    {\n        topic: \"homeassistant/sensor/\" + deviceid + \"_thw_index/config\",\n        payload: {\n            \"device\": device,\n            \"device_class\": \"temperature\",\n            \"name\": \"Current Feels Like\",\n            \"unique_id\": deviceid + \"_thw_index\",\n            \"state_topic\": txprefix + \"/thw_index\",\n            \"unit_of_measurement\": \"F\",\n            \"expire_after\": expire\n        }\n    },\n    {\n        topic: \"homeassistant/sensor/\" + deviceid + \"_bar_sea_level/config\",\n        payload: {\n            \"device\": device,\n            \"device_class\": \"pressure\",\n            \"name\": \"Barometric Pressure (sea level)\",\n            \"unique_id\": deviceid + \"_bar_sea_level\",\n            \"state_topic\": prefix + \"/bar_sea_level\",\n            \"expire_after\": expire,\n            \"unit_of_measurement\": \"in\"\n        }\n    },\n    {\n        topic: \"homeassistant/sensor/\" + deviceid + \"_bar_trend/config\",\n        payload: {\n            \"device\": device,\n            \"name\": \"Barometric Pressure Trend\",\n            \"unique_id\": deviceid + \"_bar_trend\",\n            \"state_topic\": prefix + \"/bar_trend\",\n            \"icon\": \"mdi:chart-line\",\n            \"expire_after\": expire\n        }\n    },\n    {\n        topic: \"homeassistant/sensor/\" + deviceid + \"_wind_speed_avg_last_1_min/config\",\n        payload: {\n            \"device\": device,\n            \"name\": \"Average Wind Speed (last minute)\",\n            \"unique_id\": deviceid + \"_wind_speed_avg_last_1_min\",\n            \"state_topic\": txprefix + \"/wind_speed_avg_last_1_min\",\n            \"unit_of_measurement\": \"mph\",\n            \"icon\": \"mdi:wind-turbine\",\n            \"expire_after\": expire\n        }\n    },    \n    {\n        topic: \"homeassistant/sensor/\" + deviceid + \"_wind_dir_scalar_avg_last_1_min/config\",\n        payload: {\n            \"device\": device,\n            \"name\": \"Average Wind Direction (last minute)\",\n            \"unique_id\": deviceid + \"_wind_dir_scalar_avg_last_1_min\",\n            \"state_topic\": txprefix + \"/wind_dir_scalar_avg_last_1_min\",\n            \"unit_of_measurement\": \"°\",\n            \"icon\": \"mdi:compass-outline\",\n            \"expire_after\": expire\n        }\n    },    \n    {\n        topic: \"homeassistant/sensor/\" + deviceid + \"_rain_rate_last/config\",\n        payload: {\n            \"device\": device,\n            \"name\": \"Current Rainfall Rate\",\n            \"unique_id\": deviceid + \"_rain_rate_last\",\n            \"state_topic\": txprefix + \"/rain_rate_last\",\n            \"unit_of_measurement\": \"inHr\",\n            \"icon\": \"mdi:water\",\n            \"expire_after\": expire,\n            \"value_template\": \"{{ value | multiply(\" + rain_convert + \") | round(2) }}\"\n        }\n    },\n    {\n        topic: \"homeassistant/sensor/\" + deviceid + \"_rainfall_last_15_min/config\",\n        payload: {\n            \"device\": device,\n            \"name\": \"Rainfall (last 15 minutes)\",\n            \"unique_id\": deviceid + \"_rainfall_last_15_min\",\n            \"state_topic\": txprefix + \"/rainfall_last_15_min\",\n            \"unit_of_measurement\": \"in\",\n            \"icon\": \"mdi:water\",\n            \"expire_after\": expire,\n            \"value_template\": \"{{ value | multiply(\" + rain_convert + \") | round(2) }}\"\n        }\n    },\n    {\n        topic: \"homeassistant/sensor/\" + deviceid + \"_rainfall_last_60_min/config\",\n        payload: {\n            \"device\": device,\n            \"name\": \"Rainfall (last 60 minutes)\",\n            \"unique_id\": deviceid + \"_rainfall_last_60_min\",\n            \"state_topic\": txprefix + \"/rainfall_last_60_min\",\n            \"unit_of_measurement\": \"in\",\n            \"icon\": \"mdi:water\",\n            \"expire_after\": expire,\n            \"value_template\": \"{{ value | multiply(\" + rain_convert + \") | round(2) }}\"\n        }\n    },\n    {\n        topic: \"homeassistant/sensor/\" + deviceid + \"_rainfall_last_24_hr/config\",\n        payload: {\n            \"device\": device,\n            \"name\": \"Rainfall (last 24 hours)\",\n            \"unique_id\": deviceid + \"_rainfall_last_24_hr\",\n            \"state_topic\": txprefix + \"/rainfall_last_24_hr\",\n            \"unit_of_measurement\": \"in\",\n            \"icon\": \"mdi:water\",\n            \"expire_after\": expire,\n            \"value_template\": \"{{ value | multiply(\" + rain_convert + \") | round(2) }}\"\n        }\n    },\n    {\n        topic: \"homeassistant/sensor/\" + deviceid + \"_rain_storm/config\",\n        payload: {\n            \"device\": device,\n            \"name\": \"Rainfall (current storm)\",\n            \"unique_id\": deviceid + \"_rain_storm\",\n            \"state_topic\": txprefix + \"/rain_storm\",\n            \"unit_of_measurement\": \"in\",\n            \"icon\": \"mdi:water\",\n            \"expire_after\": expire,\n            \"value_template\": \"{{ value | multiply(\" + rain_convert + \") | round(2) }}\"\n        }\n    }\n]];",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "x": 380,
    "y": 320,
    "wires": [["39021eb8.7adb32"]]
  },
  {
    "id": "f8a59b4a.6618f8",
    "type": "mqtt out",
    "z": "370e9e1.11b4462",
    "g": "e9b4a844.821958",
    "name": "Publish",
    "topic": "",
    "qos": "0",
    "retain": "true",
    "broker": "2738be24.981902",
    "x": 780,
    "y": 182,
    "wires": []
  },
  {
    "id": "cf5fe08.79a112",
    "type": "function",
    "z": "370e9e1.11b4462",
    "g": "1bd9bc23.a9eab4",
    "name": "15-Min Average",
    "func": "// determines the average of all numeric payload values \n// passed in over the specified time range\n\nif (Number.isNaN(msg.payload) || msg.topic.includes(\"avg\")) return null;\n\nconst mins = 15\nconst range = mins * 60 * 1000;   // window time millisecs\nconst ctx = context.get(msg.topic || \"default\") || {};\nconst topic = msg.topic.replace(\"_last\", \"\");\nconst buffer = ctx.buffer || [];\nconst now = new Date();\nconst value = Number(msg.payload);\n\n// remove any samples that are too old\nwhile (buffer[0] && buffer[0].timestamp < now - range) {\n    buffer.shift();\n}\n\n// add the new sample to the end\nbuffer.push({timestamp: now, value: value});\n\nlet total = 0\nbuffer.forEach(b => { total += b.value });\n\ncontext.set(msg.topic, { buffer, total });\nmsg.topic = `${topic}_avg_last_${mins}_min`;\nmsg.payload = Number((total/buffer.length).toFixed(3));\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "x": 380,
    "y": 540,
    "wires": [["7380c3a5.67200c"]]
  },
  {
    "id": "83332eec.dba97",
    "type": "function",
    "z": "370e9e1.11b4462",
    "g": "1bd9bc23.a9eab4",
    "name": "24-Hour Min/Max",
    "func": "// determines the min of all numeric payload \n// values passed in over the specified time range\n\nif (Number.isNaN(msg.payload) || msg.topic.includes(\"avg\")) return null;\n\nconst hours = 24\nconst range = hours * 3600 * 1000;   // window time millisecs\nconst topic = msg.topic.replace(\"_last\", \"\");\nconst ctx = context.get(topic || \"default\") || {};\nconst buffer = ctx.buffer || [];\nconst now = new Date();\nconst value = Number(msg.payload);\n\n// remove any samples that are too old\nwhile (buffer[0] && buffer[0].timestamp < now - range) {\n    buffer.shift();\n}\n\n// add the new sample to the end, eliminate duplicates\nif (buffer.length && buffer[buffer.length-1].value == value) {\n    buffer[buffer.length-1].timestamp = now\n} else {\n    buffer.push({timestamp: now, value: value});\n}\n\n// determine minimum value left in buffer\nlet min = Number.MAX_SAFE_INTEGER;\nbuffer.forEach(e => {\n    if (e.value < min) min = e.value\n})\n\nlet max = 0;\n// determine the maximum value left in the buffer\nbuffer.forEach(e => {\n    if (e.value > max) max = e.value\n})\n\ncontext.set(topic, { buffer, min, max });\n\nvar output = [\n    {\n        topic: `${topic}_min_last_${hours}_hr`,\n        payload: min ? min.toString() : \"\"\n    },\n    {\n        topic: `${topic}_max_last_${hours}_hr`,\n        payload: max ? max.toString() : \"\"\n    }\n]\n\nreturn [ output ];",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "x": 390,
    "y": 580,
    "wires": [["7380c3a5.67200c"]]
  },
  {
    "id": "85f09747.cbbae8",
    "type": "switch",
    "z": "370e9e1.11b4462",
    "g": "1bd9bc23.a9eab4",
    "name": "Filter Objects",
    "property": "key",
    "propertyType": "msg",
    "rules": [
      {
        "t": "regex",
        "v": "dew_point.*|heat_index.*|hum.*|temp.*|thw_index|wet_bulb|wind_chill|bar_absolute|bar_sea_level|wind_speed_last",
        "vt": "str",
        "case": true
      },
      {
        "t": "eq",
        "v": "wind_speed_avg_last_1_min",
        "vt": "str"
      }
    ],
    "checkall": "true",
    "repair": false,
    "outputs": 2,
    "x": 130,
    "y": 540,
    "wires": [["cf5fe08.79a112", "83332eec.dba97"], ["12a998f6.e862d7"]]
  },
  {
    "id": "99c1650f.dadde8",
    "type": "function",
    "z": "370e9e1.11b4462",
    "g": "1bd9bc23.a9eab4",
    "name": "1 Hour Rose Gauge",
    "func": "const hours = 1\nconst range = hours * 3600 * 1000;   // window time millisecs\n\nconst conditions = msg.payload.data.conditions[0];\nconst txid = conditions.txid;\nconst did = msg.payload.data.did;\n\nconst buffer = context.get(\"buffer\") || [];\nconst now = new Date();\nconst dir = conditions.wind_dir_scalar_avg_last_1_min;\nconst speed = conditions.wind_speed_avg_last_1_min;\n\n// remove any samples that are too old\nwhile (buffer[0] && buffer[0].timestamp < now - range) {\n    //node.warn(`removing oldest ${buffer[0].timestamp}`);\n    buffer.shift();\n}\n\n// calculate bucket (convert to 16 positions)\nconst bucket = Math.floor((dir / 22.5) + 0.5) % 16;\n\n// add the new sample to the end\nbuffer.push({timestamp: now, bucket, speed});\ncontext.set(\"buffer\", buffer);\n\n// calculate 16 directions\nconst result = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]\nbuffer.forEach(e => {\n    if (e.speed > result[e.bucket]) result[e.bucket] = e.speed; \n})\n\nmsg.topic = `daviswx/${did}/${txid}/wind_rose_last_${hours}_hr`;\nmsg.payload = result.toString()\nnode.status({fill:\"green\", shape:\"dot\", text: `${msg.payload}`});\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "x": 400,
    "y": 362,
    "wires": [["39021eb8.7adb32"]]
  },
  {
    "id": "ef2a1cda.e0547",
    "type": "function",
    "z": "370e9e1.11b4462",
    "g": "1bd9bc23.a9eab4",
    "name": "24 Hour Rose Gauge",
    "func": "const hours = 24\nconst range = hours * 3600 * 1000;   // window time millisecs\n\nconst conditions = msg.payload.data.conditions[0];\nconst txid = conditions.txid;\nconst did = msg.payload.data.did;\n\nconst buffer = context.get(\"buffer\") || [];\nconst now = new Date();\nconst dir = conditions.wind_dir_scalar_avg_last_1_min;\nconst speed = conditions.wind_speed_avg_last_1_min;\n\n// remove any samples that are too old\nwhile (buffer[0] && buffer[0].timestamp < now - range) {\n    //node.warn(`removing oldest ${buffer[0].timestamp}`);\n    buffer.shift();\n}\n\n// calculate bucket (convert to 16 positions)\nconst bucket = Math.floor((dir / 22.5) + 0.5) % 16;\n\n// add the new sample to the end\nbuffer.push({timestamp: now, bucket, speed});\ncontext.set(\"buffer\", buffer);\n\n// calculate 16 directions\nconst result = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]\nbuffer.forEach(e => {\n    if (e.speed > result[e.bucket]) result[e.bucket] = e.speed; \n})\n\nmsg.topic = `daviswx/${did}/${txid}/wind_rose_last_${hours}_hr`;\nmsg.payload = result.toString()\nnode.status({fill:\"green\", shape:\"dot\", text: `${msg.payload}`});\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "x": 400,
    "y": 417,
    "wires": [["39021eb8.7adb32"]]
  },
  {
    "id": "e5ae377c.8bd418",
    "type": "inject",
    "z": "370e9e1.11b4462",
    "g": "e9b4a844.821958",
    "name": "Every 15 minutes",
    "props": [
      {
        "p": "payload"
      },
      {
        "p": "topic",
        "vt": "str"
      }
    ],
    "repeat": "900",
    "crontab": "",
    "once": true,
    "onceDelay": "5",
    "topic": "",
    "payload": "",
    "payloadType": "date",
    "x": 150,
    "y": 80,
    "wires": [["7f84f019.d7af2"]]
  },
  {
    "id": "7f84f019.d7af2",
    "type": "http request",
    "z": "370e9e1.11b4462",
    "g": "e9b4a844.821958",
    "name": "Req Real Time Push",
    "method": "GET",
    "ret": "obj",
    "paytoqs": false,
    "url": "http://10.10.20.45/v1/real_time?duration=3600",
    "tls": "",
    "persist": false,
    "proxy": "",
    "authType": "",
    "x": 380,
    "y": 80,
    "wires": [[]]
  },
  {
    "id": "12a998f6.e862d7",
    "type": "function",
    "z": "370e9e1.11b4462",
    "g": "1bd9bc23.a9eab4",
    "name": "Wind Run Today",
    "func": "// determines the wind run from 1 minute wind averages\n// passed in over the specified time range\n\nif (Number.isNaN(msg.payload) || !msg.topic.includes(\"wind_speed_avg_last_1_min\")) return null;\n\nconst ctx = context.get(msg.topic || \"default\") || {};\nconst buffer = ctx.buffer || [];\nconst value = Number(msg.payload);\n\n// remove any samples that are too old\nlet today = new Date();\ntoday.setHours(0, 0, 0, 0);\nwhile (buffer[0] && buffer[0].timestamp < today) {\n    buffer.shift();\n}\n\n// add the new sample to the end\nbuffer.push({timestamp: new Date(), value: value});\n\nvar total = 0\nbuffer.forEach( (b, i) => {\n    const minutes = i > 0 ? (b.timestamp - buffer[i-1].timestamp) / 60000 : 1;\n    if (minutes) {\n        const periods = 60 / minutes;\n        total += b.value / periods;\n    }\n});\n\ncontext.set(msg.topic, { buffer, total });\nmsg.topic = msg.topic.replace(\"wind_speed_avg_last_1_min\", \"wind_run_today\");\nmsg.payload = total.toFixed(1).toString();\nnode.status({fill:\"green\", shape:\"dot\", text: `${msg.payload}` });\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "x": 380,
    "y": 620,
    "wires": [["7380c3a5.67200c"]]
  },
  {
    "id": "c057b3a4.fa39b",
    "type": "influxdb out",
    "z": "370e9e1.11b4462",
    "g": "1bd9bc23.a9eab4",
    "influxdb": "9a9dcd14.d91a8",
    "name": "InfluxDB",
    "measurement": "",
    "precision": "",
    "retentionPolicy": "",
    "x": 780,
    "y": 500,
    "wires": []
  },
  {
    "id": "422acfaf.56eb4",
    "type": "function",
    "z": "370e9e1.11b4462",
    "g": "1bd9bc23.a9eab4",
    "name": "Set Measure",
    "func": "if (!msg.payload) return null;\n\nmsg.measurement = msg.key\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "x": 610,
    "y": 500,
    "wires": [["c057b3a4.fa39b"]]
  },
  {
    "id": "20c24ac6.b067d6",
    "type": "link out",
    "z": "370e9e1.11b4462",
    "g": "e9b4a844.821958",
    "name": "Publish",
    "links": ["31e96dc8.823452"],
    "x": 540,
    "y": 220,
    "wires": [],
    "l": true
  },
  {
    "id": "31e96dc8.823452",
    "type": "link in",
    "z": "370e9e1.11b4462",
    "g": "e9b4a844.821958",
    "name": "to MQTT",
    "links": ["20c24ac6.b067d6", "7380c3a5.67200c", "39021eb8.7adb32"],
    "x": 635,
    "y": 120,
    "wires": [["75bb6fa4.fd3f5", "5c5726d3.284e28", "f8a59b4a.6618f8"]]
  },
  {
    "id": "7380c3a5.67200c",
    "type": "link out",
    "z": "370e9e1.11b4462",
    "g": "1bd9bc23.a9eab4",
    "name": "Publish",
    "links": ["31e96dc8.823452"],
    "x": 780,
    "y": 580,
    "wires": [],
    "l": true
  },
  {
    "id": "39021eb8.7adb32",
    "type": "link out",
    "z": "370e9e1.11b4462",
    "g": "1bd9bc23.a9eab4",
    "name": "Publish",
    "links": ["31e96dc8.823452"],
    "x": 780,
    "y": 400,
    "wires": [],
    "l": true
  },
  {
    "id": "87a27594.e70098",
    "type": "mqtt-broker",
    "name": "CloudMQTT",
    "broker": "soldier.cloudmqtt.com",
    "port": "15692",
    "clientid": "",
    "usetls": false,
    "compatmode": true,
    "keepalive": "60",
    "cleansession": true,
    "birthTopic": "",
    "birthQos": "0",
    "birthPayload": "",
    "closeTopic": "",
    "closeQos": "0",
    "closePayload": "",
    "willTopic": "",
    "willQos": "0",
    "willPayload": ""
  },
  {
    "id": "2738be24.981902",
    "type": "mqtt-broker",
    "name": "MQTT",
    "broker": "10.10.10.20",
    "port": "1883",
    "clientid": "",
    "usetls": false,
    "compatmode": false,
    "keepalive": "60",
    "cleansession": true,
    "birthTopic": "",
    "birthQos": "0",
    "birthPayload": "",
    "closeTopic": "",
    "closeQos": "0",
    "closePayload": "",
    "willTopic": "",
    "willQos": "0",
    "willPayload": ""
  },
  {
    "id": "9a9dcd14.d91a8",
    "type": "influxdb",
    "hostname": "10.10.10.20",
    "port": "8086",
    "protocol": "http",
    "database": "weather",
    "name": "WeatherDB",
    "usetls": false,
    "tls": ""
  }
]
